// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check for admin custom claim
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Check for a specific role claim (more generic than isAdmin)
    function hasRole(role) {
      // Ensure request.auth.token.role is not null before comparing
      return isAuthenticated() && request.auth.token.role != null && request.auth.token.role == role;
    }

    // Username registry - to prevent duplicate usernames
    match /usernames/{username} {
      allow read: if true; // Usernames can be publicly checked for availability
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      // Allow delete if admin OR if the user is deleting their own username reservation
      allow delete: if isAdmin() || (isAuthenticated() && resource.data.uid == request.auth.uid);
      allow update: if false; // Usernames should not be updated, only created/deleted
    }
    
    // Farmer profiles
    match /farmers/{farmerId} {
      allow read: if isAuthenticated(); // Any authenticated user can read farmer profiles (adjust if too permissive)
      allow create: if isOwner(farmerId); // User can create their own profile
      allow update: if isOwner(farmerId) || isAdmin(); // Owner or admin can update
      allow delete: if isAdmin(); // Only admins can delete farmer profiles directly
      
      // Crop history subcollection for a farmer
      match /cropHistory/{year} {
        allow read: if isOwner(farmerId) || isAdmin();
        allow write: if isOwner(farmerId) || isAdmin(); // create, update, delete
      }
      
      // Activity logs for a farmer
      match /activities/{activityId} {
        allow read: if isOwner(farmerId) || isAdmin();
        allow create: if isOwner(farmerId); // User can create their own activity logs
        allow update: if false; // Activities should generally be immutable
        allow delete: if isAdmin(); // Admin can delete activity logs if necessary
      }
    }
    
    // Farm entities (for potential future use with multiple users per farm)
    match /farms/{farmId} {
      // User can read if they are a member of the farm
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      // User can create if they are listed as a member in the new farm document
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
      // User can update if they are an owner of the farm
      allow update: if isAuthenticated() && request.auth.uid in resource.data.owners;
      allow delete: if isAdmin(); // Only admin can delete a farm entity
    }
    
    // Admin user list (used for tracking who is an admin, not for rules directly if using claims)
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow write: if isAdmin(); // Only admins can modify the list of admins
    }
    
    // Global statistics (read-only for users, writable by functions)
    match /statistics/{statId} { // Changed {stat} to {statId} for clarity
      allow read: if isAuthenticated();
      allow write: if false; // Only backend/cloud functions can write statistics
    }
    
    // Seasonal prompts and reminders, readable by users, writable by admin
    match /seasonalPrompts/{promptId} { // Changed {year} to {promptId} for generality
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Admin logs (writable only by functions/backend, readable by admins)
    match /adminLogs/{logId} {
        allow read: if isAdmin();
        allow write: if false; // Only backend/cloud functions should write these
    }

    // Cache (from previous setup - review if still needed or if rules conflict)
    match /weatherCache/{cacheKey} {
      allow read: if true; 
      allow write: if false; 
    }

    // User-specific alerts (from previous setup - review)
    match /alerts/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // API Keys (from previous setup - review)
    match /apiKeys/{keyId} {
        allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow write: if false; 
    }

    // Usage logs (from previous setup - review)
    match /usage/{documentId} {
        allow read: if false; 
        allow write: if false; 
    }

    // Farmer Stats (from previous setup, related to farmers collection)
    match /farmerStats/{farmerId} {
        allow read: if isOwner(farmerId) || isAdmin();
        allow write: if isOwner(farmerId) || isAdmin(); // Or only by functions if stats are backend-calculated
    }

  }
}
